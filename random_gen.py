"""Random numbers for an uneven dice roll."""import randomimport numpy as npclass RandomGen(object):    # Values - a list of integers that may be returned by next_num()    # Probabilities - probabilities of the occurence of values        def __init__(self, nums, probs):        self.values, self.probabilities = nums, probs                if len(nums) != len(probs):            raise ValueError('Values and probabilities must be of equal sizes')        else:            self._cumprobs = np.insert(np.cumsum(np.array(self._probabilities)), 0, 0)        @property    def values(self):        return self._random_nums        @values.setter    def values(self, nums):        if len(nums) == 0:            raise ValueError('Values cannot be empty')        elif not isinstance(nums, list):            raise ValueError('Values must be a list')        elif any(not isinstance(inums, int) for inums in nums):            raise ValueError('Values must all be integers')        self._random_nums = nums        @property    def probabilities(self):        return self._probabilities        @probabilities.setter    def probabilities(self, probs):        if len(probs) == 0:            raise ValueError('Probabilities cannot be empty')        elif not isinstance(probs, list):            raise ValueError('Probabilities must be a list')        elif any(not isinstance(iprobs, float) for iprobs in probs):            raise ValueError('Probabilities must all be floats')        elif sum(probs) != 1.0:            raise ValueError('Sum of probabilities must be 1.0')        self._probabilities = probs             def next_num(self):        rnd = random.random()        idx = np.digitize(rnd, self._cumprobs, True)        val = self._random_nums[idx - 1]        return val